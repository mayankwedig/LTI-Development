{"version":3,"file":"password-strength.umd.min.js","sources":["../../tmp/module/component/mat-password-strength/mat-password-strength.component.ts","../../tmp/module/animations/index.ts","../../tmp/module/component/mat-password-strength-info/mat-password-strength-info.component.ts","../../tmp/module/mat-password-strength.module.ts"],"sourcesContent":["import {ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges} from '@angular/core';\nimport {AbstractControl, FormControl, Validators} from '@angular/forms';\n\nexport enum Colors {\n  primary = 'primary',\n  accent = 'accent',\n  warn = 'warn'\n}\n\nexport enum Criteria {\n  at_least_eight_chars,\n  at_least_one_lower_case_char,\n  at_least_one_upper_case_char,\n  at_least_one_digit_char,\n  at_least_one_special_char,\n}\n\n@Component({\n  selector: 'mat-password-strength',\n  exportAs: 'matPasswordStrength',\n  template: `\n    <mat-progress-bar mode=\"determinate\"\n                      [color]=\"color\"\n                      [value]=\"strength\">\n    </mat-progress-bar>\n  `,\n  styles: [`\n\n  `],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatPasswordStrengthComponent implements OnInit, OnChanges {\n\n  @Input() password: string;\n  @Input() validators: Criteria[] = Object.keys(Criteria).map(key => Criteria[key]);\n  @Input() externalError: boolean;\n\n  @Input() enableLengthRule = true;\n  @Input() enableLowerCaseLetterRule = true;\n  @Input() enableUpperCaseLetterRule = true;\n  @Input() enableDigitRule = true;\n  @Input() enableSpecialCharRule = true;\n\n  @Input() min = 8;\n  @Input() max = 30;\n\n  @Output()\n  onStrengthChanged: EventEmitter<number> = new EventEmitter<number>();\n\n  criteriaMap = new Map<Criteria, RegExp>();\n\n  containAtLeastEightChars: boolean;\n  containAtLeastOneLowerCaseLetter: boolean;\n  containAtLeastOneUpperCaseLetter: boolean;\n  containAtLeastOneDigit: boolean;\n  containAtLeastOneSpecialChar: boolean;\n\n  passwordFormControl: AbstractControl = new FormControl();\n\n  private _strength = 0;\n\n  private _color: string;\n\n  ngOnInit(): void {\n    this.setRulesAndValidators();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n\n    if ((changes.externalError && changes.externalError.firstChange) || changes.password.isFirstChange()) {\n      return;\n    } else if (changes.externalError && changes.externalError.currentValue) {\n      this._color = Colors.warn;\n      return;\n    } else {\n      this.password && this.password.length > 0 ?\n        this.calculatePasswordStrength() : this.reset();\n    }\n  }\n\n  get strength(): number {\n    return this._strength ? this._strength : 0;\n  }\n\n  get color(): string {\n\n    if (this._strength <= 20) {\n      return Colors.warn;\n    } else if (this._strength <= 80) {\n      return Colors.accent;\n    } else {\n      return Colors.primary;\n    }\n  }\n\n  private _containAtLeastEightChars(): boolean {\n    this.containAtLeastEightChars = this.password.length >= 8;\n    return this.containAtLeastEightChars;\n  }\n\n  private _containAtLeastOneLowerCaseLetter(): boolean {\n    this.containAtLeastOneLowerCaseLetter =\n      this.criteriaMap\n        .get(Criteria.at_least_one_lower_case_char)\n        .test(this.password);\n    return this.containAtLeastOneLowerCaseLetter;\n  }\n\n  private _containAtLeastOneUpperCaseLetter(): boolean {\n    this.containAtLeastOneUpperCaseLetter =\n      this.criteriaMap\n        .get(Criteria.at_least_one_upper_case_char)\n        .test(this.password);\n    return this.containAtLeastOneUpperCaseLetter;\n  }\n\n  private _containAtLeastOneDigit(): boolean {\n    this.containAtLeastOneDigit =\n      this.criteriaMap\n        .get(Criteria.at_least_one_digit_char)\n        .test(this.password);\n    return this.containAtLeastOneDigit;\n  }\n\n  private _containAtLeastOneSpecialChar(): boolean {\n    this.containAtLeastOneSpecialChar =\n      this.criteriaMap\n        .get(Criteria.at_least_one_special_char)\n        .test(this.password);\n    return this.containAtLeastOneSpecialChar;\n  }\n\n  setRulesAndValidators(): void {\n    if (this.enableLengthRule) {\n      this.criteriaMap.set(Criteria.at_least_eight_chars, RegExp(`^.{${this.min},${this.max}$`));\n    }\n    if (this.enableLowerCaseLetterRule) {\n      this.criteriaMap.set(Criteria.at_least_one_lower_case_char, RegExp(/^(?=.*?[a-z])/));\n    }\n    if (this.enableUpperCaseLetterRule) {\n      this.criteriaMap.set(Criteria.at_least_one_upper_case_char, RegExp(/^(?=.*?[A-Z])/));\n    }\n    if (this.enableDigitRule) {\n      this.criteriaMap.set(Criteria.at_least_one_digit_char, RegExp(/^(?=.*?[0-9])/));\n    }\n    if (this.enableSpecialCharRule) {\n      this.criteriaMap.set(Criteria.at_least_one_special_char, RegExp(/^(?=.*?[\" !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\"])/));\n    }\n\n    this.passwordFormControl.setValidators(Validators.pattern(this.criteriaMap.get(Criteria.at_least_eight_chars)));\n\n    this.validators.map(criteria => {\n      this.passwordFormControl.setValidators(Validators.pattern(this.criteriaMap.get(criteria)));\n    })\n\n  }\n\n  calculatePasswordStrength() {\n    const requirements: Array<boolean> = [];\n    const unit = 100 / this.criteriaMap.size;\n\n    // console.log('this.criteriaMap.size = ', this.criteriaMap.size);\n    // console.log('unit = ', unit);\n\n    requirements.push(\n      this.enableLengthRule ? this._containAtLeastEightChars() : false,\n      this.enableLowerCaseLetterRule ? this._containAtLeastOneLowerCaseLetter() : false,\n      this.enableUpperCaseLetterRule ? this._containAtLeastOneUpperCaseLetter() : false,\n      this.enableDigitRule ? this._containAtLeastOneDigit() : false,\n      this.enableSpecialCharRule ? this._containAtLeastOneSpecialChar() : false);\n\n    this._strength = requirements.filter(v => v).length * unit;\n    // console.log('length = ', this._strength / unit);\n    this.onStrengthChanged.emit(this.strength);\n  }\n\n  reset() {\n    this._strength = 0;\n    this.containAtLeastEightChars =\n      this.containAtLeastOneLowerCaseLetter =\n        this.containAtLeastOneUpperCaseLetter =\n          this.containAtLeastOneDigit =\n            this.containAtLeastOneSpecialChar = false;\n  }\n}\n","import {animate, animation, AnimationReferenceMetadata, keyframes, style} from '@angular/animations';\n\nexport function flipIn(timing: number, rotateX: number, rotateY: number): AnimationReferenceMetadata {\n  const params = {timing: timing, delay: 0, rotateX, rotateY};\n\n  return animation(\n    [\n      style({'backface-visibility': 'visible'}),\n      animate(\n        '{{ timing }}s {{ delay }}s ease-in',\n        keyframes([\n          style({\n            opacity: 0,\n            transform:\n              'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 90deg)',\n            offset: 0,\n          }),\n          style({\n            opacity: 1,\n            transform:\n              'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -20deg)',\n            offset: 0.4,\n          }),\n          style({\n            transform:\n              'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 10deg)',\n            offset: 0.6,\n          }),\n          style({\n            transform:\n              'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -5deg)',\n            offset: 0.8,\n          }),\n          style({\n            transform: 'perspective(400px) rotate3d(0, 0, 0, 0)',\n            offset: 1,\n          }),\n        ])\n      ),\n    ],\n    {params}\n  );\n}\n\nexport const flipInX = flipIn(1, 1, 0);\nexport const flipInY = flipIn(1, 0, 1);\n\nexport const shake = animation(\n  animate(\n    '{{ timing }}s {{ delay }}s',\n    keyframes([\n      style({transform: 'translate3d(0, 0, 0)', offset: 0}),\n      style({transform: 'translate3d(-10px, 0, 0)', offset: 0.1}),\n      style({transform: 'translate3d(10px, 0, 0)', offset: 0.2}),\n      style({transform: 'translate3d(-10px, 0, 0)', offset: 0.3}),\n      style({transform: 'translate3d(10px, 0, 0)', offset: 0.4}),\n      style({transform: 'translate3d(-10px, 0, 0)', offset: 0.5}),\n      style({transform: 'translate3d(10px, 0, 0)', offset: 0.6}),\n      style({transform: 'translate3d(-10px, 0, 0)', offset: 0.7}),\n      style({transform: 'translate3d(10px, 0, 0)', offset: 0.8}),\n      style({transform: 'translate3d(-10px, 0, 0)', offset: 0.9}),\n      style({transform: 'translate3d(0, 0, 0)', offset: 1}),\n    ])\n  ),\n  {params: {timing: 1, delay: 0}}\n);\n","import {Component, Input} from '@angular/core';\nimport {MatPasswordStrengthComponent} from '../mat-password-strength/mat-password-strength.component';\nimport {animate, animateChild, keyframes, query, stagger, style, transition, trigger, useAnimation} from '@angular/animations';\nimport {shake} from '../../animations/index';\n\n@Component({\n  selector: 'mat-password-strength-info',\n  exportAs: 'matPasswordStrengthInfo',\n  template: `\n    <mat-card @list>\n      <mat-card-content fxLayout=\"column\" fxLayoutAlign=\"start\">\n\n        <div class=\"info-row\" @items *ngIf=\"passwordComponent.enableLowerCaseLetterRule\">\n          <div *ngIf=\"passwordComponent.containAtLeastOneLowerCaseLetter; then done else error\" @flipY>\n          </div>\n          <ng-template #done>\n            <mat-icon @positiveState color=\"primary\">done</mat-icon>\n          </ng-template>\n          <ng-template #error>\n            <mat-icon @negativeState color=\"warn\">error</mat-icon>\n          </ng-template>\n          <div>\n            <p>contains at least one lower character</p>\n          </div>\n        </div>\n\n        <div class=\"info-row\" @items *ngIf=\"passwordComponent.enableUpperCaseLetterRule\">\n          <div *ngIf=\"passwordComponent.containAtLeastOneUpperCaseLetter; then done else error\">\n          </div>\n          <ng-template #done>\n            <mat-icon @positiveState color=\"primary\">done</mat-icon>\n          </ng-template>\n          <ng-template #error>\n            <mat-icon @negativeState color=\"warn\">error</mat-icon>\n          </ng-template>\n          <div>\n            <p>contains at least one upper character</p>\n          </div>\n        </div>\n\n        <div class=\"info-row\" @items *ngIf=\"passwordComponent.enableDigitRule\">\n          <div *ngIf=\"passwordComponent.containAtLeastOneDigit; then done else error\">\n          </div>\n          <ng-template #done>\n            <mat-icon @positiveState color=\"primary\">done</mat-icon>\n          </ng-template>\n          <ng-template #error>\n            <mat-icon @negativeState color=\"warn\">error</mat-icon>\n          </ng-template>\n          <div>\n            <p>contains at least one digit character</p>\n          </div>\n        </div>\n\n        <div class=\"info-row\" @items *ngIf=\"passwordComponent.enableSpecialCharRule\">\n          <div *ngIf=\"passwordComponent.containAtLeastOneSpecialChar; then done else error\">\n          </div>\n          <ng-template #done>\n            <mat-icon @positiveState color=\"primary\">done</mat-icon>\n          </ng-template>\n          <ng-template #error>\n            <mat-icon @negativeState color=\"warn\">error</mat-icon>\n          </ng-template>\n          <div>\n            <p>contains at least one special character</p>\n          </div>\n        </div>\n\n        <div class=\"info-row\" @items *ngIf=\"passwordComponent.enableLengthRule\">\n          <div *ngIf=\"passwordComponent.containAtLeastEightChars; then done else error\">\n          </div>\n          <ng-template #done>\n            <mat-icon @positiveState color=\"primary\">done</mat-icon>\n          </ng-template>\n          <ng-template #error>\n            <mat-icon @negativeState color=\"warn\">error</mat-icon>\n          </ng-template>\n          <div>\n            <p>contains at least {{passwordComponent.min}} characters</p>\n          </div>\n        </div>\n\n        <div *ngIf=\"enableScoreInfo\" class=\"info-row\" @items>\n          <div *ngIf=\"passwordComponent.strength === 100; then done else error\">\n          </div>\n          <ng-template #done>\n            <mat-icon @positiveState color=\"primary\">done</mat-icon>\n          </ng-template>\n          <ng-template #error>\n            <mat-icon @negativeState color=\"warn\">error</mat-icon>\n          </ng-template>\n          <div>\n            <p>Password's strength = {{passwordComponent.strength}} %100</p>\n          </div>\n        </div>\n\n      </mat-card-content>\n    </mat-card>\n  `,\n  styles: [`\n    mat-card{flex-direction:row;place-content:stretch center;flex:1 1 0%}mat-card,mat-card mat-card-content{box-sizing:border-box;display:flex;align-items:stretch}mat-card mat-card-content{flex-direction:column;max-width:100%;place-content:stretch flex-start}mat-card mat-card-content mat-icon{margin-right:10px}mat-card mat-card-content .info-row{flex-direction:row;box-sizing:border-box;display:flex}\n  `],\n  animations: [\n    // nice stagger effect when showing existing elements\n    trigger('list', [\n      transition(':enter', [\n        // child animation selector + stagger\n        query('@items',\n          stagger(300, animateChild())\n        )\n      ]),\n    ]),\n    trigger('items', [\n      // cubic-bezier for a tiny bouncing feel\n      transition(':enter', [\n        style({transform: 'scale(0.5)', opacity: 0}),\n        animate('1s cubic-bezier(.8,-0.6,0.2,1.5)',\n          style({transform: 'scale(1)', opacity: 1}))\n      ]),\n      transition(':leave', [\n        style({transform: 'scale(1)', opacity: 1, height: '*'}),\n        animate('1s cubic-bezier(.8,-0.6,0.2,1.5)',\n          style({transform: 'scale(0.5)', opacity: 0, height: '0px', margin: '0px'}))\n      ]),\n    ]),\n    trigger('positiveState', [\n      transition(':enter', [\n        style({'backface-visibility': 'visible'}),\n        animate(\n          '{{ timing }}s {{ delay }}s ease-in',\n          keyframes([\n            style({\n              opacity: 0,\n              transform:\n                'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 90deg)',\n              offset: 0,\n            }),\n            style({\n              opacity: 1,\n              transform:\n                'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -20deg)',\n              offset: 0.4,\n            }),\n            style({\n              transform:\n                'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 10deg)',\n              offset: 0.6,\n            }),\n            style({\n              transform:\n                'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -5deg)',\n              offset: 0.8,\n            }),\n            style({\n              transform: 'perspective(400px) rotate3d(0, 0, 0, 0)',\n              offset: 1,\n            }),\n          ])\n        ),\n      ], {params: {timing: 1, delay: 0, rotateX: 1, rotateY: 0}}),\n    ]),\n    trigger('negativeState', [\n      transition(':enter', useAnimation(shake)),\n    ]),\n  ],\n})\nexport class MatPasswordStrengthInfoComponent {\n\n  @Input()\n  passwordComponent: MatPasswordStrengthComponent;\n\n  @Input()\n  enableScoreInfo = false;\n\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule, ModuleWithProviders} from '@angular/core';\nimport {MatCardModule, MatIconModule, MatProgressBarModule} from '@angular/material';\n\nimport {MatPasswordStrengthComponent} from './component/mat-password-strength/mat-password-strength.component';\nimport {\n  MatPasswordStrengthInfoComponent\n} from './component/mat-password-strength-info/mat-password-strength-info.component';\n\n// Export module's public API\nexport {MatPasswordStrengthComponent} from './component/mat-password-strength/mat-password-strength.component';\nexport {\n  MatPasswordStrengthInfoComponent\n} from './component/mat-password-strength-info/mat-password-strength-info.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatProgressBarModule,\n    MatCardModule,\n    MatIconModule\n  ],\n  exports: [MatPasswordStrengthComponent, MatPasswordStrengthInfoComponent],\n  declarations: [MatPasswordStrengthComponent, MatPasswordStrengthInfoComponent]\n})\nexport class MatPasswordStrengthModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: MatPasswordStrengthModule,\n      providers: []\n    };\n  }\n}\n"],"names":["at_least_eight_chars","at_least_one_lower_case_char","at_least_one_upper_case_char","at_least_one_digit_char","at_least_one_special_char","this","Object","keys","Criteria","map","key","EventEmitter","Map","FormControl","MatPasswordStrengthComponent","setRulesAndValidators","changes","externalError","firstChange","password","isFirstChange","currentValue","_color","Colors","length","calculatePasswordStrength","reset","_strength","containAtLeastEightChars","containAtLeastOneLowerCaseLetter","criteriaMap","get","test","containAtLeastOneUpperCaseLetter","containAtLeastOneDigit","containAtLeastOneSpecialChar","enableLengthRule","set","RegExp","min","max","enableLowerCaseLetterRule","enableUpperCaseLetterRule","enableDigitRule","enableSpecialCharRule","passwordFormControl","setValidators","Validators","pattern","validators","criteria","_this","requirements","unit","size","push","_containAtLeastEightChars","_containAtLeastOneLowerCaseLetter","_containAtLeastOneUpperCaseLetter","_containAtLeastOneDigit","_containAtLeastOneSpecialChar","filter","v","onStrengthChanged","emit","strength","Component","selector","exportAs","template","styles","changeDetection","ChangeDetectionStrategy","OnPush","Input","Output","flipIn","timing","rotateX","rotateY","params","delay","animation","style","backface-visibility","animate","keyframes","opacity","transform","offset","shake","animations","trigger","transition","query","stagger","animateChild","height","margin","useAnimation","MatPasswordStrengthModule","ngModule","providers","NgModule","imports","CommonModule","MatProgressBarModule","MatCardModule","MatIconModule","exports","MatPasswordStrengthInfoComponent","declarations"],"mappings":"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"}