/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as zxcvbn_ from 'zxcvbn';
var /** @type {?} */ zxcvbn = zxcvbn_;
var PasswordStrengthMeterService = /** @class */ (function () {
    function PasswordStrengthMeterService() {
    }
    /**
     *  this will return the password strength score in number
     *  0 - too guessable
     *  1 - very guessable
     *  2 - somewhat guessable
     *  3 - safely unguessable
     *  4 - very unguessable
     *
     *  @param password
     */
    /**
     *  this will return the password strength score in number
     *  0 - too guessable
     *  1 - very guessable
     *  2 - somewhat guessable
     *  3 - safely unguessable
     *  4 - very unguessable
     *
     *  \@param password
     * @param {?} password
     * @return {?}
     */
    PasswordStrengthMeterService.prototype.score = /**
     *  this will return the password strength score in number
     *  0 - too guessable
     *  1 - very guessable
     *  2 - somewhat guessable
     *  3 - safely unguessable
     *  4 - very unguessable
     *
     *  \@param password
     * @param {?} password
     * @return {?}
     */
    function (password) {
        var /** @type {?} */ result = zxcvbn(password);
        return result.score;
    };
    /**
     * this will return the password strength score with feedback messages
     * return type { score: number; feedback: { suggestions: string[]; warning: string } }
     *
     * @param password
     */
    /**
     * this will return the password strength score with feedback messages
     * return type { score: number; feedback: { suggestions: string[]; warning: string } }
     *
     * @param {?} password
     * @return {?}
     */
    PasswordStrengthMeterService.prototype.scoreWithFeedback = /**
     * this will return the password strength score with feedback messages
     * return type { score: number; feedback: { suggestions: string[]; warning: string } }
     *
     * @param {?} password
     * @return {?}
     */
    function (password) {
        var /** @type {?} */ result = zxcvbn(password);
        return { score: result.score, feedback: result.feedback };
    };
    PasswordStrengthMeterService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    PasswordStrengthMeterService.ctorParameters = function () { return []; };
    return PasswordStrengthMeterService;
}());
export { PasswordStrengthMeterService };
function PasswordStrengthMeterService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    PasswordStrengthMeterService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    PasswordStrengthMeterService.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQtc3RyZW5ndGgtbWV0ZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItcGFzc3dvcmQtc3RyZW5ndGgtbWV0ZXIvIiwic291cmNlcyI6WyJsaWIvcGFzc3dvcmQtc3RyZW5ndGgtbWV0ZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEtBQUssT0FBTyxNQUFNLFFBQVEsQ0FBQztBQUVsQyxxQkFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDOztJQUlyQjtLQUFnQjtJQUVoQjs7Ozs7Ozs7O09BU0c7Ozs7Ozs7Ozs7Ozs7SUFDSCw0Q0FBSzs7Ozs7Ozs7Ozs7O0lBQUwsVUFBTSxRQUFRO1FBQ1oscUJBQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNoQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztLQUNyQjtJQUVEOzs7OztPQUtHOzs7Ozs7OztJQUNILHdEQUFpQjs7Ozs7OztJQUFqQixVQUFrQixRQUFRO1FBQ3hCLHFCQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDaEMsTUFBTSxDQUFDLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztLQUMzRDs7Z0JBNUJGLFVBQVU7Ozs7dUNBTlg7O1NBT2EsNEJBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0ICogYXMgenhjdmJuXyBmcm9tICd6eGN2Ym4nO1xyXG5cclxuY29uc3QgenhjdmJuID0genhjdmJuXztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFBhc3N3b3JkU3RyZW5ndGhNZXRlclNlcnZpY2Uge1xyXG4gIGNvbnN0cnVjdG9yKCkge31cclxuXHJcbiAgLyoqXHJcbiAgICogIHRoaXMgd2lsbCByZXR1cm4gdGhlIHBhc3N3b3JkIHN0cmVuZ3RoIHNjb3JlIGluIG51bWJlclxyXG4gICAqICAwIC0gdG9vIGd1ZXNzYWJsZVxyXG4gICAqICAxIC0gdmVyeSBndWVzc2FibGVcclxuICAgKiAgMiAtIHNvbWV3aGF0IGd1ZXNzYWJsZVxyXG4gICAqICAzIC0gc2FmZWx5IHVuZ3Vlc3NhYmxlXHJcbiAgICogIDQgLSB2ZXJ5IHVuZ3Vlc3NhYmxlXHJcbiAgICpcclxuICAgKiAgQHBhcmFtIHBhc3N3b3JkXHJcbiAgICovXHJcbiAgc2NvcmUocGFzc3dvcmQpOiBudW1iZXIge1xyXG4gICAgY29uc3QgcmVzdWx0ID0genhjdmJuKHBhc3N3b3JkKTtcclxuICAgIHJldHVybiByZXN1bHQuc2NvcmU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiB0aGlzIHdpbGwgcmV0dXJuIHRoZSBwYXNzd29yZCBzdHJlbmd0aCBzY29yZSB3aXRoIGZlZWRiYWNrIG1lc3NhZ2VzXHJcbiAgICogcmV0dXJuIHR5cGUgeyBzY29yZTogbnVtYmVyOyBmZWVkYmFjazogeyBzdWdnZXN0aW9uczogc3RyaW5nW107IHdhcm5pbmc6IHN0cmluZyB9IH1cclxuICAgKlxyXG4gICAqIEBwYXJhbSBwYXNzd29yZFxyXG4gICAqL1xyXG4gIHNjb3JlV2l0aEZlZWRiYWNrKHBhc3N3b3JkKTogeyBzY29yZTogbnVtYmVyOyBmZWVkYmFjazogeyBzdWdnZXN0aW9uczogc3RyaW5nW107IHdhcm5pbmc6IHN0cmluZyB9IH0ge1xyXG4gICAgY29uc3QgcmVzdWx0ID0genhjdmJuKHBhc3N3b3JkKTtcclxuICAgIHJldHVybiB7IHNjb3JlOiByZXN1bHQuc2NvcmUsIGZlZWRiYWNrOiByZXN1bHQuZmVlZGJhY2sgfTtcclxuICB9XHJcbn1cclxuIl19