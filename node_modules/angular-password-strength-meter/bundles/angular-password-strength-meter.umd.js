(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('zxcvbn'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('angular-password-strength-meter', ['exports', '@angular/core', 'zxcvbn', '@angular/common'], factory) :
    (factory((global['angular-password-strength-meter'] = {}),global.ng.core,null,global.ng.common));
}(this, (function (exports,core,zxcvbn_,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ zxcvbn = zxcvbn_;
    var PasswordStrengthMeterService = (function () {
        function PasswordStrengthMeterService() {
        }
        /**
         *  this will return the password strength score in number
         *  0 - too guessable
         *  1 - very guessable
         *  2 - somewhat guessable
         *  3 - safely unguessable
         *  4 - very unguessable
         *
         *  @param password
         */
        /**
         *  this will return the password strength score in number
         *  0 - too guessable
         *  1 - very guessable
         *  2 - somewhat guessable
         *  3 - safely unguessable
         *  4 - very unguessable
         *
         *  \@param password
         * @param {?} password
         * @return {?}
         */
        PasswordStrengthMeterService.prototype.score = /**
         *  this will return the password strength score in number
         *  0 - too guessable
         *  1 - very guessable
         *  2 - somewhat guessable
         *  3 - safely unguessable
         *  4 - very unguessable
         *
         *  \@param password
         * @param {?} password
         * @return {?}
         */
            function (password) {
                var /** @type {?} */ result = zxcvbn(password);
                return result.score;
            };
        /**
         * this will return the password strength score with feedback messages
         * return type { score: number; feedback: { suggestions: string[]; warning: string } }
         *
         * @param password
         */
        /**
         * this will return the password strength score with feedback messages
         * return type { score: number; feedback: { suggestions: string[]; warning: string } }
         *
         * @param {?} password
         * @return {?}
         */
        PasswordStrengthMeterService.prototype.scoreWithFeedback = /**
         * this will return the password strength score with feedback messages
         * return type { score: number; feedback: { suggestions: string[]; warning: string } }
         *
         * @param {?} password
         * @return {?}
         */
            function (password) {
                var /** @type {?} */ result = zxcvbn(password);
                return { score: result.score, feedback: result.feedback };
            };
        PasswordStrengthMeterService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        PasswordStrengthMeterService.ctorParameters = function () { return []; };
        return PasswordStrengthMeterService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var PasswordStrengthMeterComponent = (function () {
        function PasswordStrengthMeterComponent(passwordStrengthMeterService) {
            this.passwordStrengthMeterService = passwordStrengthMeterService;
            this.minPasswordLength = 8;
            this.enableFeedback = false;
            this.colors = [];
            this.strengthChange = new core.EventEmitter();
            this.passwordStrength = null;
            this.feedback = null;
            this.prevPasswordStrength = null;
            this.defaultColours = [
                'darkred',
                'orangered',
                'orange',
                'yellowgreen',
                'green'
            ];
        }
        /**
         * @return {?}
         */
        PasswordStrengthMeterComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () { };
        /**
         * @param {?} changes
         * @return {?}
         */
        PasswordStrengthMeterComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes['password']) {
                    this.calculatePasswordStrength();
                }
            };
        /**
         * @return {?}
         */
        PasswordStrengthMeterComponent.prototype.calculatePasswordStrength = /**
         * @return {?}
         */
            function () {
                // TODO validation logic optimization
                if (!this.password) {
                    this.passwordStrength = null;
                }
                else if (this.password && this.password.length < this.minPasswordLength) {
                    this.passwordStrength = 0;
                }
                else {
                    if (this.enableFeedback) {
                        var /** @type {?} */ result = this.passwordStrengthMeterService.scoreWithFeedback(this.password);
                        this.passwordStrength = result.score;
                        this.feedback = result.feedback;
                    }
                    else {
                        this.passwordStrength = this.passwordStrengthMeterService.score(this.password);
                        this.feedback = null;
                    }
                }
                // Only emit the passwordStrength if it changed
                if (this.prevPasswordStrength !== this.passwordStrength) {
                    this.strengthChange.emit(this.passwordStrength);
                    this.prevPasswordStrength = this.passwordStrength;
                }
            };
        /**
         * @param {?} strength
         * @return {?}
         */
        PasswordStrengthMeterComponent.prototype.getMeterFillColor = /**
         * @param {?} strength
         * @return {?}
         */
            function (strength) {
                if (!strength || strength < 0 || strength > 5) {
                    return this.colors[0] ? this.colors[0] : this.defaultColours[0];
                }
                return this.colors[strength]
                    ? this.colors[strength]
                    : this.defaultColours[strength];
            };
        PasswordStrengthMeterComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'password-strength-meter',
                        template: "<div>\n  <div class=\"strength-meter\">\n    <div class=\"strength-meter-fill\" [style.background]=\"getMeterFillColor(passwordStrength)\" [attr.data-strength]=\"passwordStrength\"></div>\n  </div>\n  <ng-container *ngIf=\"enableFeedback && feedback\">\n    <small class=\"password-feedback\" *ngIf=\"feedback.warning\">\n      {{feedback.warning}}\n    </small>\n    <small class=\"password-feedback\" *ngIf=\"feedback.suggestions && feedback.suggestions.length > 0\">\n      <ng-container *ngFor=\"let suggetion of feedback.suggestions\">{{suggetion}}</ng-container>\n    </small>\n  </ng-container>\n</div>\n",
                        styles: [".strength-meter{position:relative;height:3px;background:#ddd;margin:10px auto;border-radius:3px}.strength-meter:after,.strength-meter:before{content:'';height:inherit;background:0 0;display:block;border-color:#fff;border-style:solid;border-width:0 5px;position:absolute;width:85px;z-index:10}.strength-meter:before{left:70px}.strength-meter:after{right:70px}.strength-meter-fill{background:0 0;height:inherit;position:absolute;width:0;border-radius:inherit;transition:width .5s ease-in-out,background .25s}.strength-meter-fill[data-strength='0']{background:#8b0000;width:20%}.strength-meter-fill[data-strength='1']{background:#ff4500;width:40%}.strength-meter-fill[data-strength='2']{background:orange;width:60%}.strength-meter-fill[data-strength='3']{background:#9acd32;width:80%}.strength-meter-fill[data-strength='4']{background:green;width:100%}.password-feedback{font-size:70%;font-weight:400;color:#6c757d!important;display:inline-block;margin-top:.25rem}"],
                        providers: [PasswordStrengthMeterService]
                    },] },
        ];
        /** @nocollapse */
        PasswordStrengthMeterComponent.ctorParameters = function () {
            return [
                { type: PasswordStrengthMeterService, },
            ];
        };
        PasswordStrengthMeterComponent.propDecorators = {
            "password": [{ type: core.Input },],
            "minPasswordLength": [{ type: core.Input },],
            "enableFeedback": [{ type: core.Input },],
            "colors": [{ type: core.Input },],
            "strengthChange": [{ type: core.Output },],
        };
        return PasswordStrengthMeterComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var PasswordStrengthMeterModule = (function () {
        function PasswordStrengthMeterModule() {
        }
        PasswordStrengthMeterModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule],
                        declarations: [PasswordStrengthMeterComponent],
                        exports: [PasswordStrengthMeterComponent]
                    },] },
        ];
        return PasswordStrengthMeterModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.PasswordStrengthMeterService = PasswordStrengthMeterService;
    exports.PasswordStrengthMeterComponent = PasswordStrengthMeterComponent;
    exports.PasswordStrengthMeterModule = PasswordStrengthMeterModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,