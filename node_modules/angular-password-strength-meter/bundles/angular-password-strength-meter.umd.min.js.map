{"version":3,"sources":["ng://angular-password-strength-meter/lib/password-strength-meter.service.ts","ng://angular-password-strength-meter/lib/password-strength-meter.component.ts","ng://angular-password-strength-meter/lib/password-strength-meter.module.ts"],"names":["zxcvbn","zxcvbn_","PasswordStrengthMeterService","prototype","score","password","scoreWithFeedback","result","feedback","Injectable","PasswordStrengthMeterComponent","passwordStrengthMeterService","this","EventEmitter","ngOnInit","ngOnChanges","changes","calculatePasswordStrength","length","minPasswordLength","passwordStrength","enableFeedback","prevPasswordStrength","strengthChange","emit","getMeterFillColor","strength","colors","defaultColours","Component","args","selector","template","styles","providers","Input","Output","PasswordStrengthMeterModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"yYAIA,IAAMA,EAASC,eAIb,SAAAC,YAYAA,EAAAC,UAAAC,MAAA,SAAMC,GAEJ,OADeL,EAAOK,GACRD,OAShBF,EAAAC,UAAAG,kBAAA,SAAkBD,GAChB,IAAME,EAASP,EAAOK,GACtB,MAAO,CAAED,MAAOG,EAAOH,MAAOI,SAAUD,EAAOC,+BA3BlDC,EAAAA,wDCNDC,EAAA,WAwDE,SAAAA,EACUC,GAAAC,KAAAD,6BAAAA,yBAvBmB,uBAEH,cAEE,uBAED,IAAIE,EAAAA,mCAEJ,mBAE4B,+BAExB,yBAEN,CACvB,UACA,YACA,SACA,cACA,gBAOFH,EAAAP,UAAAW,SAAA,aAEAJ,EAAAP,UAAAY,YAAA,SAAYC,GACNA,EAAkB,UACpBJ,KAAKK,6BAIDP,EAAAP,UAAAc,qCAEN,GAAKL,KAAKP,SAEH,GAAIO,KAAKP,UAAYO,KAAKP,SAASa,OAASN,KAAKO,kBACtDP,KAAKQ,iBAAmB,OAExB,GAAIR,KAAKS,eAAgB,CACvB,IAAMd,EAASK,KAAKD,6BAA6BL,kBAC/CM,KAAKP,UAEPO,KAAKQ,iBAAmBb,EAAOH,MAC/BQ,KAAKJ,SAAWD,EAAOC,cAEvBI,KAAKQ,iBAAmBR,KAAKD,6BAA6BP,MACxDQ,KAAKP,UAEPO,KAAKJ,SAAW,UAdlBI,KAAKQ,iBAAmB,KAmBtBR,KAAKU,uBAAyBV,KAAKQ,mBACrCR,KAAKW,eAAeC,KAAKZ,KAAKQ,kBAC9BR,KAAKU,qBAAuBV,KAAKQ,mBAIrCV,EAAAP,UAAAsB,kBAAA,SAAkBC,GAChB,OAAKA,GAAYA,EAAW,GAAgB,EAAXA,EACxBd,KAAKe,OAAO,GAAKf,KAAKe,OAAO,GAAKf,KAAKgB,eAAe,GAGxDhB,KAAKe,OAAOD,GACfd,KAAKe,OAAOD,GACZd,KAAKgB,eAAeF,wBA3F3BG,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,0BACVC,SAAU,klBAcVC,OAAQ,CAAC,q8BACTC,UAAW,CAAChC,gDAnBLA,uCAsBNiC,EAAAA,iCAEAA,EAAAA,8BAEAA,EAAAA,sBAEAA,EAAAA,8BAEAC,EAAAA,YAxCH,GCAAC,EAAA,oDAKCC,EAAAA,SAAQR,KAAA,CAAC,CACRS,QAAS,CAACC,EAAAA,cACVC,aAAc,CAAC/B,GACfgC,QAAS,CAAChC,SARZ","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport * as zxcvbn_ from 'zxcvbn';\r\n\r\nconst zxcvbn = zxcvbn_;\r\n\r\n@Injectable()\r\nexport class PasswordStrengthMeterService {\r\n  constructor() {}\r\n\r\n  /**\r\n   *  this will return the password strength score in number\r\n   *  0 - too guessable\r\n   *  1 - very guessable\r\n   *  2 - somewhat guessable\r\n   *  3 - safely unguessable\r\n   *  4 - very unguessable\r\n   *\r\n   *  @param password\r\n   */\r\n  score(password): number {\r\n    const result = zxcvbn(password);\r\n    return result.score;\r\n  }\r\n\r\n  /**\r\n   * this will return the password strength score with feedback messages\r\n   * return type { score: number; feedback: { suggestions: string[]; warning: string } }\r\n   *\r\n   * @param password\r\n   */\r\n  scoreWithFeedback(password): { score: number; feedback: { suggestions: string[]; warning: string } } {\r\n    const result = zxcvbn(password);\r\n    return { score: result.score, feedback: result.feedback };\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\n\r\nimport { PasswordStrengthMeterService } from './password-strength-meter.service';\r\n\r\n@Component({\r\n  selector: 'password-strength-meter',\r\n  template: `<div>\r\n  <div class=\"strength-meter\">\r\n    <div class=\"strength-meter-fill\" [style.background]=\"getMeterFillColor(passwordStrength)\" [attr.data-strength]=\"passwordStrength\"></div>\r\n  </div>\r\n  <ng-container *ngIf=\"enableFeedback && feedback\">\r\n    <small class=\"password-feedback\" *ngIf=\"feedback.warning\">\r\n      {{feedback.warning}}\r\n    </small>\r\n    <small class=\"password-feedback\" *ngIf=\"feedback.suggestions && feedback.suggestions.length > 0\">\r\n      <ng-container *ngFor=\"let suggetion of feedback.suggestions\">{{suggetion}}</ng-container>\r\n    </small>\r\n  </ng-container>\r\n</div>\r\n`,\r\n  styles: [`.strength-meter{position:relative;height:3px;background:#ddd;margin:10px auto;border-radius:3px}.strength-meter:after,.strength-meter:before{content:'';height:inherit;background:0 0;display:block;border-color:#fff;border-style:solid;border-width:0 5px;position:absolute;width:85px;z-index:10}.strength-meter:before{left:70px}.strength-meter:after{right:70px}.strength-meter-fill{background:0 0;height:inherit;position:absolute;width:0;border-radius:inherit;transition:width .5s ease-in-out,background .25s}.strength-meter-fill[data-strength='0']{background:#8b0000;width:20%}.strength-meter-fill[data-strength='1']{background:#ff4500;width:40%}.strength-meter-fill[data-strength='2']{background:orange;width:60%}.strength-meter-fill[data-strength='3']{background:#9acd32;width:80%}.strength-meter-fill[data-strength='4']{background:green;width:100%}.password-feedback{font-size:70%;font-weight:400;color:#6c757d!important;display:inline-block;margin-top:.25rem}`],\r\n  providers: [PasswordStrengthMeterService]\r\n})\r\nexport class PasswordStrengthMeterComponent implements OnInit, OnChanges {\r\n  @Input() password: string;\r\n\r\n  @Input() minPasswordLength = 8;\r\n\r\n  @Input() enableFeedback = false;\r\n\r\n  @Input() colors: string[] = [];\r\n\r\n  @Output() strengthChange = new EventEmitter<number>();\r\n\r\n  passwordStrength: number = null;\r\n\r\n  feedback: { suggestions: string[]; warning: string } = null;\r\n\r\n  private prevPasswordStrength = null;\r\n\r\n  private defaultColours = [\r\n    'darkred',\r\n    'orangered',\r\n    'orange',\r\n    'yellowgreen',\r\n    'green'\r\n  ];\r\n\r\n  constructor(\r\n    private passwordStrengthMeterService: PasswordStrengthMeterService\r\n  ) {}\r\n\r\n  ngOnInit() {}\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes['password']) {\r\n      this.calculatePasswordStrength();\r\n    }\r\n  }\r\n\r\n  private calculatePasswordStrength() {\r\n    // TODO validation logic optimization\r\n    if (!this.password) {\r\n      this.passwordStrength = null;\r\n    } else if (this.password && this.password.length < this.minPasswordLength) {\r\n      this.passwordStrength = 0;\r\n    } else {\r\n      if (this.enableFeedback) {\r\n        const result = this.passwordStrengthMeterService.scoreWithFeedback(\r\n          this.password\r\n        );\r\n        this.passwordStrength = result.score;\r\n        this.feedback = result.feedback;\r\n      } else {\r\n        this.passwordStrength = this.passwordStrengthMeterService.score(\r\n          this.password\r\n        );\r\n        this.feedback = null;\r\n      }\r\n    }\r\n\r\n    // Only emit the passwordStrength if it changed\r\n    if (this.prevPasswordStrength !== this.passwordStrength) {\r\n      this.strengthChange.emit(this.passwordStrength);\r\n      this.prevPasswordStrength = this.passwordStrength;\r\n    }\r\n  }\r\n\r\n  getMeterFillColor(strength) {\r\n    if (!strength || strength < 0 || strength > 5) {\r\n      return this.colors[0] ? this.colors[0] : this.defaultColours[0];\r\n    }\r\n\r\n    return this.colors[strength]\r\n      ? this.colors[strength]\r\n      : this.defaultColours[strength];\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { PasswordStrengthMeterComponent } from './password-strength-meter.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [PasswordStrengthMeterComponent],\r\n  exports: [PasswordStrengthMeterComponent]\r\n})\r\nexport class PasswordStrengthMeterModule {}\r\n"]}