/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as zxcvbn_ from 'zxcvbn';
const /** @type {?} */ zxcvbn = zxcvbn_;
export class PasswordStrengthMeterService {
    constructor() { }
    /**
     *  this will return the password strength score in number
     *  0 - too guessable
     *  1 - very guessable
     *  2 - somewhat guessable
     *  3 - safely unguessable
     *  4 - very unguessable
     *
     *  \@param password
     * @param {?} password
     * @return {?}
     */
    score(password) {
        const /** @type {?} */ result = zxcvbn(password);
        return result.score;
    }
    /**
     * this will return the password strength score with feedback messages
     * return type { score: number; feedback: { suggestions: string[]; warning: string } }
     *
     * @param {?} password
     * @return {?}
     */
    scoreWithFeedback(password) {
        const /** @type {?} */ result = zxcvbn(password);
        return { score: result.score, feedback: result.feedback };
    }
}
PasswordStrengthMeterService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
PasswordStrengthMeterService.ctorParameters = () => [];
function PasswordStrengthMeterService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    PasswordStrengthMeterService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    PasswordStrengthMeterService.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQtc3RyZW5ndGgtbWV0ZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItcGFzc3dvcmQtc3RyZW5ndGgtbWV0ZXIvIiwic291cmNlcyI6WyJsaWIvcGFzc3dvcmQtc3RyZW5ndGgtbWV0ZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEtBQUssT0FBTyxNQUFNLFFBQVEsQ0FBQztBQUVsQyx1QkFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDO0FBR3ZCLE1BQU07SUFDSixpQkFBZ0I7Ozs7Ozs7Ozs7Ozs7SUFZaEIsS0FBSyxDQUFDLFFBQVE7UUFDWix1QkFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2hDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO0tBQ3JCOzs7Ozs7OztJQVFELGlCQUFpQixDQUFDLFFBQVE7UUFDeEIsdUJBQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNoQyxNQUFNLENBQUMsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO0tBQzNEOzs7WUE1QkYsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCAqIGFzIHp4Y3Zibl8gZnJvbSAnenhjdmJuJztcclxuXHJcbmNvbnN0IHp4Y3ZibiA9IHp4Y3Zibl87XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBQYXNzd29yZFN0cmVuZ3RoTWV0ZXJTZXJ2aWNlIHtcclxuICBjb25zdHJ1Y3RvcigpIHt9XHJcblxyXG4gIC8qKlxyXG4gICAqICB0aGlzIHdpbGwgcmV0dXJuIHRoZSBwYXNzd29yZCBzdHJlbmd0aCBzY29yZSBpbiBudW1iZXJcclxuICAgKiAgMCAtIHRvbyBndWVzc2FibGVcclxuICAgKiAgMSAtIHZlcnkgZ3Vlc3NhYmxlXHJcbiAgICogIDIgLSBzb21ld2hhdCBndWVzc2FibGVcclxuICAgKiAgMyAtIHNhZmVseSB1bmd1ZXNzYWJsZVxyXG4gICAqICA0IC0gdmVyeSB1bmd1ZXNzYWJsZVxyXG4gICAqXHJcbiAgICogIEBwYXJhbSBwYXNzd29yZFxyXG4gICAqL1xyXG4gIHNjb3JlKHBhc3N3b3JkKTogbnVtYmVyIHtcclxuICAgIGNvbnN0IHJlc3VsdCA9IHp4Y3ZibihwYXNzd29yZCk7XHJcbiAgICByZXR1cm4gcmVzdWx0LnNjb3JlO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogdGhpcyB3aWxsIHJldHVybiB0aGUgcGFzc3dvcmQgc3RyZW5ndGggc2NvcmUgd2l0aCBmZWVkYmFjayBtZXNzYWdlc1xyXG4gICAqIHJldHVybiB0eXBlIHsgc2NvcmU6IG51bWJlcjsgZmVlZGJhY2s6IHsgc3VnZ2VzdGlvbnM6IHN0cmluZ1tdOyB3YXJuaW5nOiBzdHJpbmcgfSB9XHJcbiAgICpcclxuICAgKiBAcGFyYW0gcGFzc3dvcmRcclxuICAgKi9cclxuICBzY29yZVdpdGhGZWVkYmFjayhwYXNzd29yZCk6IHsgc2NvcmU6IG51bWJlcjsgZmVlZGJhY2s6IHsgc3VnZ2VzdGlvbnM6IHN0cmluZ1tdOyB3YXJuaW5nOiBzdHJpbmcgfSB9IHtcclxuICAgIGNvbnN0IHJlc3VsdCA9IHp4Y3ZibihwYXNzd29yZCk7XHJcbiAgICByZXR1cm4geyBzY29yZTogcmVzdWx0LnNjb3JlLCBmZWVkYmFjazogcmVzdWx0LmZlZWRiYWNrIH07XHJcbiAgfVxyXG59XHJcbiJdfQ==